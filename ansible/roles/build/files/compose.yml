networks:
  postgres:
    name: postgre_network
    driver: bridge
volumes:
  main-data:
  pgadmin-data:

services:
    db:
      image: postgres:14.8-alpine3.18
      container_name: 'postgres_cont'
      command:
        - "postgres"
        - "-c"
        - "max_connections=50"
        - "-c"
        - "shared_buffers=1GB"
        - "-c"
        - "effective_cache_size=4GB"
        - "-c"
        - "work_mem=16MB"
        - "-c"
        - "maintenance_work_mem=512MB"
        - "-c"
        - "random_page_cost=1.1"
        - "-c"
        - "temp_file_limit=10GB"
        - "-c"
        - "log_min_duration_statement=200ms"
        - "-c"
        - "idle_in_transaction_session_timeout=10s"
        - "-c"
        - "lock_timeout=1s"
        - "-c"
        - "statement_timeout=60s"
        - "-c"
        - "shared_preload_libraries=pg_stat_statements"
        - "-c"
        - "pg_stat_statements.max=10000"
        - "-c"
        - "pg_stat_statements.track=all"
      environment:
        POSTGRES_USER: ${POSTGRES_USR}
        POSTGRES_PASSWORD: ${POSTGRES_PASS} 
        POSTGRES_DB: ${POSTGRES_DATABASE}
        PGDATA: ${POSTGRE_PG_DATA}
      volumes:
        - ./database:/docker-entrypoint-initdb.d
        - main-data:/var/lib/postgresql/data
      networks:
        - postgres
      ports:
        - ${POSTGRE_PORTS}
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USR} -d ${POSTGRES_DATABASE}"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 10s
      restart: unless-stopped
      deploy:
        resources:
          limits:
            cpus: '1'
            memory: 4G
      
    adminer:
      image: dpage/pgadmin4:7.2
      container_name: 'pgadmin_cont'
      environment:
        PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
        PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASS}
        PGADMIN_CONFIG_SERVER_MODE: "False"
      volumes:
        - pgadmin-data:/var/lib/pgadmin
      ports:
        - ${ADMINER_PORTS}
      restart: unless-stopped 
      deploy:
        resources:
          limits:
            cpus: '0.5'
            memory: 1G
      networks:
        - postgres

    postgres_exporter:
      container_name: exporter_cont
      image: prometheuscommunity/postgres-exporter:v0.10.1
      environment:
        DATA_SOURCE_URI: ${PG_EXPORTER_DATA_URI}
        DATA_SOURCE_USER: ${PG_EXPORTER_DATA_USER}
        DATA_SOURCE_PASS: ${PG_EXPORTER_DATA_PASS}
        PG_EXPORTER_EXTEND_QUERY_PATH: ${PG_EXPORTER_QUERY_PATH}
      volumes:
        - ./queries.yaml:/etc/postgres_exporter/queries.yaml:ro
      ports: 
        - ${PG_EXPORTER_PORTS}
      restart: unless-stopped
      deploy:
        resources:
          limits:
            cpus: '0.2'
            memory: 500M
      networks:
        - postgres
  # rabbitmq:
  #   image: rabbitmq:3.9-management
  #   container_name: 'rabbitmq'
  #   ports:
  #     - ${RABBIT_PORT1}
  #     - ${RABBIT_PORT2}
  #   environment:
  #     - RABBITMQ_DEFAULT_USER=${RABBIT_USER}
  #     - RABBITMQ_DEFAULT_PASS=${RABBIT_PASSWORD}
  #   volumes:
  #     - ./_volume/rabbitmq/rabbitmq.config:/etc/rabbitmq/rabbitmq.config
  #   networks:
  #     - main

  
  # redis:
  #   image: redis:alpine
  #   container_name: 'redis_microjs'
  #   hostname: 'redis'
  #   ports:
  #     - ${REDIS_PORTS}
  #   environment:
  #     - REDIS_PASSWORD=${REDIS_PASSWORD}
  #     - REDIS_REPLICATION_MODE=master
  #   volumes:
  #     - ./_volume/redis/redis.conf:/usr/local/etc/redis/redis.conf
  #   command: redis-server --requirepass ${REDIS_PASSWORD} --include /usr/local/etc/redis/redis.conf
  #   networks:
  #     - main

  # adminer:
  #   image: dockette/adminer:full
  #   container_name: 'adminer_microjs'
  #   ports:
  #     - ${ADMINER_PORTS}
  #   volumes:
  #     - ./_volume/adminer/index.php:/srv/index.php
  #   networks:
  #     - main
  #   depends_on:
  #     - loggerDB
    
